(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{194:function(e,t,a){e.exports=a.p+"assets/img/global-architecture.c9eb93bc.png"},195:function(e,t,a){e.exports=a.p+"assets/img/global-architecture-v2.515c9d8b.png"},208:function(e,t,a){"use strict";a.r(t);var r=[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"global-architecture"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#global-architecture","aria-hidden":"true"}},[this._v("#")]),this._v(" Global architecture")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:a(194),alt:"Global architecture"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"architecture-at-scale"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#architecture-at-scale","aria-hidden":"true"}},[this._v("#")]),this._v(" Architecture at scale")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"monolithic-application"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#monolithic-application","aria-hidden":"true"}},[this._v("#")]),this._v(" Monolithic application")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"tip custom-block"},[t("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),t("p",[this._v("This approach is something between the true monolith and the true microservices architecture, i.e. you scale your entire application but not its underlying services according to their workload.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"distributed-application"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#distributed-application","aria-hidden":"true"}},[this._v("#")]),this._v(" Distributed application")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// config/default.js")]),e._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n  proxyTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// proxy all requests starting with /api/service")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/api/service'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'http://my.service.com'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      changeOrigin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      pathRewrite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'^/api/service'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/api'")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The above example will proxy the request "),t("code",[this._v("/api/service/1")]),this._v(" to "),t("code",[this._v("http://my.service.com/api/1")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"distributed-forecast-data-processing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#distributed-forecast-data-processing","aria-hidden":"true"}},[this._v("#")]),this._v(" Distributed forecast data processing")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:a(195),alt:"Global architecture"}})])}],s=a(0),n=Object(s.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[e._m(0),e._v(" "),a("p",[e._v("The typical global architecture and the underlying technologies of Weacast are summarized in the following diagram:")]),e._v(" "),e._m(1),e._v(" "),a("p",[e._v("Typically, the Docker image of our "),a("a",{attrs:{href:"https://hub.docker.com/r/weacast/weacast/",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo app"),a("OutboundLink")],1),e._v(" is actually the "),a("a",{attrs:{href:"https://github.com/weacast/weacast-api",target:"_blank",rel:"noopener noreferrer"}},[e._v("backend API module"),a("OutboundLink")],1),e._v(", configured with local "),a("router-link",{attrs:{to:"./../api/plugin.html"}},[e._v("forecast model plugins")]),e._v(" and serving the "),a("a",{attrs:{href:"https://github.com/weacast/weacast",target:"_blank",rel:"noopener noreferrer"}},[e._v("client demo app"),a("OutboundLink")],1),e._v(".")],1),e._v(" "),e._m(2),e._v(" "),a("p",[e._v("Although the typical architecture presented previously can be deployed in a single-server environment Weacast has been developed as a loosely coupled set of modules to prevent it being a "),a("a",{attrs:{href:"http://whatis.techtarget.com/definition/monolithic-architecture",target:"_blank",rel:"noopener noreferrer"}},[e._v("monolithic piece of software"),a("OutboundLink")],1),e._v(". The built-in "),a("a",{attrs:{href:"https://docs.feathersjs.com/guides/about/philosophy.html#services",target:"_blank",rel:"noopener noreferrer"}},[e._v("service layer"),a("OutboundLink")],1),e._v(" helps decoupling the business logic from how it is being accessed based on a "),a("a",{attrs:{href:"https://docs.feathersjs.com/guides/about/philosophy.html#uniform-interfaces",target:"_blank",rel:"noopener noreferrer"}},[e._v("simple and unambiguous interface"),a("OutboundLink")],1),e._v(". Weacast can thus be deployed in a "),a("a",{attrs:{href:"http://searchmicroservices.techtarget.com/definition/microservices",target:"_blank",rel:"noopener noreferrer"}},[e._v("microservice architectural style"),a("OutboundLink")],1),e._v(", which is typically used to provide high availability. The idea is to deploy different Weacast instances on different "),a("em",[e._v("logical hosts")]),e._v(" (can be physical machines as well as containers or virtual machines) each running a different forecast model or the probe plugin for instance. However, you will have to face some "),a("a",{attrs:{href:"https://docs.feathersjs.com/guides/advanced/scaling.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("scaling configuration issues"),a("OutboundLink")],1),e._v(" first. You also have to setup the underlying logical infrastructure. To achieve high availability, different strategies may be used.")]),e._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("It is recommanded to have a single source of truth (SSOT) for your data (i.e. a single database), simplifying authentication, which requires you to setup a "),a("a",{attrs:{href:"https://docs.mongodb.com/manual/tutorial/deploy-replica-set/",target:"_blank",rel:"noopener noreferrer"}},[e._v("MongoDB replica set"),a("OutboundLink")],1),e._v(" at scale and configure the DB URL "),a("a",{attrs:{href:"http://mongodb.github.io/node-mongodb-native/2.0/reference/connecting/connection-settings/",target:"_blank",rel:"noopener noreferrer"}},[e._v("accordingly"),a("OutboundLink")],1),e._v(".")])]),e._v(" "),e._m(3),e._v(" "),a("p",[e._v("This is the easiest strategy, you can rely on Cloud-ready solutions like "),a("a",{attrs:{href:"https://kalisio.github.io/kaabah/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kaabah"),a("OutboundLink")],1),e._v(" to replicate and load-balance the different instances of your application and simply use "),a("a",{attrs:{href:"https://github.com/feathersjs-ecosystem/feathers-sync",target:"_blank",rel:"noopener noreferrer"}},[e._v("feathers-sync"),a("OutboundLink")],1),e._v(" to synchronize service events.")]),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),a("p",[e._v("You can split up your Weacast API manually on a per-responsibility basis (e.g. each forecast model on a dedicated instance) and just communicate with each other through Feathers clients using all the infrastructure that is already in place. You could also deploy a frontend application serving as an "),a("a",{attrs:{href:"http://microservices.io/patterns/apigateway.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("API gateway"),a("OutboundLink")],1),e._v(". To configure the proxy rules, edit the "),a("code",[e._v("proxyTable")]),e._v(" option in your configuration. The frontend server is using "),a("a",{attrs:{href:"https://github.com/chimurai/http-proxy-middleware",target:"_blank",rel:"noopener noreferrer"}},[e._v("http-proxy-middleware"),a("OutboundLink")],1),e._v(" for proxying, so you should refer to its docs for a detailed usage but here's a simple example:")]),e._v(" "),e._m(6),e._m(7),e._v(" "),a("p",[e._v("However, all of this requires manual work, creates a tight coupling with your underlying infrastructure and will not allow auto-scaling unless you have some discovery mechanism. You can make each instance automatically aware of others instances to distribute services and related events using "),a("a",{attrs:{href:"https://github.com/kalisio/feathers-distributed",target:"_blank",rel:"noopener noreferrer"}},[e._v("feathers-distributed"),a("OutboundLink")],1),e._v(". This is the reason why the "),a("a",{attrs:{href:"https://github.com/weacast/weacast-api",target:"_blank",rel:"noopener noreferrer"}},[e._v("weacast-api"),a("OutboundLink")],1),e._v(" module provides you with a ready-to-go microservice backend to expose the services you'd like to using "),a("a",{attrs:{href:"https://github.com/kalisio/feathers-distributed",target:"_blank",rel:"noopener noreferrer"}},[e._v("feathers-distributed"),a("OutboundLink")],1),e._v(" by default.")]),e._v(" "),e._m(8),e._v(" "),a("p",[e._v("Because the most consuming part of a Weacast application is usually the gathering and processing of forecast model data, the "),a("a",{attrs:{href:"https://github.com/weacast/weacast-loader",target:"_blank",rel:"noopener noreferrer"}},[e._v("weacast-loader"),a("OutboundLink")],1),e._v(" module provides you with a set of download services available as Docker containers out-of-the-box. You can rely on Cloud-ready solutions like "),a("a",{attrs:{href:"https://kalisio.github.io/kaabah/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kaabah"),a("OutboundLink")],1),e._v(" to easily distribute/replicate these services on your cluster. Your Weacast application server can then only focus on forecast data retrieval for clients and can be scaled if necessary like a monolith application. The typical global architecture of such an approach is summarized in the following diagram.")]),e._v(" "),e._m(9)])},r,!1,null,null,null);n.options.__file="global-architecture.md";t.default=n.exports}}]);